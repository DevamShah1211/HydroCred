/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buy"
      | "createListing"
      | "delist"
      | "listings"
      | "nextListingId"
      | "roleManager"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Delisted" | "Listed" | "Purchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextListingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace DelistedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListedEvent {
  export type InputTuple = [
    id: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish,
    pricePerTokenWei: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    seller: string,
    amount: bigint,
    pricePerTokenWei: bigint
  ];
  export interface OutputObject {
    id: bigint;
    seller: string;
    amount: bigint;
    pricePerTokenWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchasedEvent {
  export type InputTuple = [
    id: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    buyer: string,
    amount: bigint,
    value: bigint
  ];
  export interface OutputObject {
    id: bigint;
    buyer: string;
    amount: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<
    [listingId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;

  createListing: TypedContractMethod<
    [amount: BigNumberish, pricePerTokenWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  delist: TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        seller: string;
        amount: bigint;
        pricePerTokenWei: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  nextListingId: TypedContractMethod<[], [bigint], "view">;

  roleManager: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [listingId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [amount: BigNumberish, pricePerTokenWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delist"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        seller: string;
        amount: bigint;
        pricePerTokenWei: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextListingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Delisted"
  ): TypedContractEvent<
    DelistedEvent.InputTuple,
    DelistedEvent.OutputTuple,
    DelistedEvent.OutputObject
  >;
  getEvent(
    key: "Listed"
  ): TypedContractEvent<
    ListedEvent.InputTuple,
    ListedEvent.OutputTuple,
    ListedEvent.OutputObject
  >;
  getEvent(
    key: "Purchased"
  ): TypedContractEvent<
    PurchasedEvent.InputTuple,
    PurchasedEvent.OutputTuple,
    PurchasedEvent.OutputObject
  >;

  filters: {
    "Delisted(uint256)": TypedContractEvent<
      DelistedEvent.InputTuple,
      DelistedEvent.OutputTuple,
      DelistedEvent.OutputObject
    >;
    Delisted: TypedContractEvent<
      DelistedEvent.InputTuple,
      DelistedEvent.OutputTuple,
      DelistedEvent.OutputObject
    >;

    "Listed(uint256,address,uint256,uint256)": TypedContractEvent<
      ListedEvent.InputTuple,
      ListedEvent.OutputTuple,
      ListedEvent.OutputObject
    >;
    Listed: TypedContractEvent<
      ListedEvent.InputTuple,
      ListedEvent.OutputTuple,
      ListedEvent.OutputObject
    >;

    "Purchased(uint256,address,uint256,uint256)": TypedContractEvent<
      PurchasedEvent.InputTuple,
      PurchasedEvent.OutputTuple,
      PurchasedEvent.OutputObject
    >;
    Purchased: TypedContractEvent<
      PurchasedEvent.InputTuple,
      PurchasedEvent.OutputTuple,
      PurchasedEvent.OutputObject
    >;
  };
}
